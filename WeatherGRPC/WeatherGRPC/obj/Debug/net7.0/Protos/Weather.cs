// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/weather.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WeatherGRPC {

  /// <summary>Holder for reflection information generated from Protos/weather.proto</summary>
  public static partial class WeatherReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/weather.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeatherReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90b3Mvd2VhdGhlci5wcm90bxIHd2VhdGhlchobZ29vZ2xlL3Byb3Rv",
            "YnVmL2VtcHR5LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnBy",
            "b3RvIg4KDEVtcHR5TWVzc2FnZSK5AwoNV2VhdGhlclZhbHVlcxITCgtzdGF0",
            "aW9uTmFtZRgCIAEoCRIcChRtZWFzdXJlbWVudFRpbWVzdGFtcBgDIAEoCRIV",
            "Cg1haXJUZW1lcGFydXRlGAQgASgCEhoKEndldEJ1bGJUZW1wZXJhdHVyZRgF",
            "IAEoAhIQCghodW1pZGl0eRgGIAEoBRIVCg1yYWluSW50ZW5zaXR5GAcgASgC",
            "EhQKDGludGVydmFsUmFpbhgIIAEoAhIRCgl0b3RhbFJhaW4YCSABKAISGQoR",
            "cHJlY2lwaXRhdGlvblR5cGUYCiABKAUSFQoNd2luZERpcmVjdGlvbhgLIAEo",
            "AhIRCgl3aW5kU3BlZWQYDCABKAISGAoQbWF4aW11bVdpbmRTcGVlZBgNIAEo",
            "AhIZChFiaW9tZXRyaWNQcmVzc3VyZRgOIAEoAhIWCg5zb2xhclJhZGlhdGlv",
            "bhgPIAEoBRIPCgdoZWFkaW5nGBAgASgFEhMKC2JhdHRlcnlMaWZlGBEgASgC",
            "EiEKGW1lYXN1cmVtZW50VGltZXN0YW1wTGFiZWwYEiABKAkSFQoNbWVhc3Vy",
            "ZW1lbnRJZBgBIAEoCSIiCglXZWF0aGVySWQSFQoNbWVhc3VyZW1lbnRJZBgB",
            "IAEoCTLBAgoHV2VhdGhlchI9CgpHZXRBbGxEYXRhEhUud2VhdGhlci5FbXB0",
            "eU1lc3NhZ2UaFi53ZWF0aGVyLldlYXRoZXJWYWx1ZXMwARI8Cg5HZXRXZWF0",
            "aGVyQnlJZBISLndlYXRoZXIuV2VhdGhlcklkGhYud2VhdGhlci5XZWF0aGVy",
            "VmFsdWVzEjwKCkFkZFdlYXRoZXISFi53ZWF0aGVyLldlYXRoZXJWYWx1ZXMa",
            "Fi53ZWF0aGVyLldlYXRoZXJWYWx1ZXMSPwoNVXBkYXRlV2VhdGhlchIWLndl",
            "YXRoZXIuV2VhdGhlclZhbHVlcxoWLndlYXRoZXIuV2VhdGhlclZhbHVlcxI6",
            "Cg1EZWxldGVXZWF0aGVyEhIud2VhdGhlci5XZWF0aGVySWQaFS53ZWF0aGVy",
            "LkVtcHR5TWVzc2FnZUIOqgILV2VhdGhlckdSUENiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WeatherGRPC.EmptyMessage), global::WeatherGRPC.EmptyMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WeatherGRPC.WeatherValues), global::WeatherGRPC.WeatherValues.Parser, new[]{ "StationName", "MeasurementTimestamp", "AirTemeparute", "WetBulbTemperature", "Humidity", "RainIntensity", "IntervalRain", "TotalRain", "PrecipitationType", "WindDirection", "WindSpeed", "MaximumWindSpeed", "BiometricPressure", "SolarRadiation", "Heading", "BatteryLife", "MeasurementTimestampLabel", "MeasurementId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WeatherGRPC.WeatherId), global::WeatherGRPC.WeatherId.Parser, new[]{ "MeasurementId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EmptyMessage : pb::IMessage<EmptyMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmptyMessage> _parser = new pb::MessageParser<EmptyMessage>(() => new EmptyMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WeatherGRPC.WeatherReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EmptyMessage(EmptyMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EmptyMessage Clone() {
      return new EmptyMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EmptyMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class WeatherValues : pb::IMessage<WeatherValues>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WeatherValues> _parser = new pb::MessageParser<WeatherValues>(() => new WeatherValues());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WeatherValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WeatherGRPC.WeatherReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeatherValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeatherValues(WeatherValues other) : this() {
      stationName_ = other.stationName_;
      measurementTimestamp_ = other.measurementTimestamp_;
      airTemeparute_ = other.airTemeparute_;
      wetBulbTemperature_ = other.wetBulbTemperature_;
      humidity_ = other.humidity_;
      rainIntensity_ = other.rainIntensity_;
      intervalRain_ = other.intervalRain_;
      totalRain_ = other.totalRain_;
      precipitationType_ = other.precipitationType_;
      windDirection_ = other.windDirection_;
      windSpeed_ = other.windSpeed_;
      maximumWindSpeed_ = other.maximumWindSpeed_;
      biometricPressure_ = other.biometricPressure_;
      solarRadiation_ = other.solarRadiation_;
      heading_ = other.heading_;
      batteryLife_ = other.batteryLife_;
      measurementTimestampLabel_ = other.measurementTimestampLabel_;
      measurementId_ = other.measurementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeatherValues Clone() {
      return new WeatherValues(this);
    }

    /// <summary>Field number for the "stationName" field.</summary>
    public const int StationNameFieldNumber = 2;
    private string stationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StationName {
      get { return stationName_; }
      set {
        stationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measurementTimestamp" field.</summary>
    public const int MeasurementTimestampFieldNumber = 3;
    private string measurementTimestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeasurementTimestamp {
      get { return measurementTimestamp_; }
      set {
        measurementTimestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airTemeparute" field.</summary>
    public const int AirTemeparuteFieldNumber = 4;
    private float airTemeparute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AirTemeparute {
      get { return airTemeparute_; }
      set {
        airTemeparute_ = value;
      }
    }

    /// <summary>Field number for the "wetBulbTemperature" field.</summary>
    public const int WetBulbTemperatureFieldNumber = 5;
    private float wetBulbTemperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WetBulbTemperature {
      get { return wetBulbTemperature_; }
      set {
        wetBulbTemperature_ = value;
      }
    }

    /// <summary>Field number for the "humidity" field.</summary>
    public const int HumidityFieldNumber = 6;
    private int humidity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Humidity {
      get { return humidity_; }
      set {
        humidity_ = value;
      }
    }

    /// <summary>Field number for the "rainIntensity" field.</summary>
    public const int RainIntensityFieldNumber = 7;
    private float rainIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RainIntensity {
      get { return rainIntensity_; }
      set {
        rainIntensity_ = value;
      }
    }

    /// <summary>Field number for the "intervalRain" field.</summary>
    public const int IntervalRainFieldNumber = 8;
    private float intervalRain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IntervalRain {
      get { return intervalRain_; }
      set {
        intervalRain_ = value;
      }
    }

    /// <summary>Field number for the "totalRain" field.</summary>
    public const int TotalRainFieldNumber = 9;
    private float totalRain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TotalRain {
      get { return totalRain_; }
      set {
        totalRain_ = value;
      }
    }

    /// <summary>Field number for the "precipitationType" field.</summary>
    public const int PrecipitationTypeFieldNumber = 10;
    private int precipitationType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PrecipitationType {
      get { return precipitationType_; }
      set {
        precipitationType_ = value;
      }
    }

    /// <summary>Field number for the "windDirection" field.</summary>
    public const int WindDirectionFieldNumber = 11;
    private float windDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WindDirection {
      get { return windDirection_; }
      set {
        windDirection_ = value;
      }
    }

    /// <summary>Field number for the "windSpeed" field.</summary>
    public const int WindSpeedFieldNumber = 12;
    private float windSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WindSpeed {
      get { return windSpeed_; }
      set {
        windSpeed_ = value;
      }
    }

    /// <summary>Field number for the "maximumWindSpeed" field.</summary>
    public const int MaximumWindSpeedFieldNumber = 13;
    private float maximumWindSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaximumWindSpeed {
      get { return maximumWindSpeed_; }
      set {
        maximumWindSpeed_ = value;
      }
    }

    /// <summary>Field number for the "biometricPressure" field.</summary>
    public const int BiometricPressureFieldNumber = 14;
    private float biometricPressure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BiometricPressure {
      get { return biometricPressure_; }
      set {
        biometricPressure_ = value;
      }
    }

    /// <summary>Field number for the "solarRadiation" field.</summary>
    public const int SolarRadiationFieldNumber = 15;
    private int solarRadiation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SolarRadiation {
      get { return solarRadiation_; }
      set {
        solarRadiation_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 16;
    private int heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "batteryLife" field.</summary>
    public const int BatteryLifeFieldNumber = 17;
    private float batteryLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BatteryLife {
      get { return batteryLife_; }
      set {
        batteryLife_ = value;
      }
    }

    /// <summary>Field number for the "measurementTimestampLabel" field.</summary>
    public const int MeasurementTimestampLabelFieldNumber = 18;
    private string measurementTimestampLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeasurementTimestampLabel {
      get { return measurementTimestampLabel_; }
      set {
        measurementTimestampLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measurementId" field.</summary>
    public const int MeasurementIdFieldNumber = 1;
    private string measurementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeasurementId {
      get { return measurementId_; }
      set {
        measurementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WeatherValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WeatherValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationName != other.StationName) return false;
      if (MeasurementTimestamp != other.MeasurementTimestamp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirTemeparute, other.AirTemeparute)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WetBulbTemperature, other.WetBulbTemperature)) return false;
      if (Humidity != other.Humidity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RainIntensity, other.RainIntensity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntervalRain, other.IntervalRain)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalRain, other.TotalRain)) return false;
      if (PrecipitationType != other.PrecipitationType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindDirection, other.WindDirection)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindSpeed, other.WindSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaximumWindSpeed, other.MaximumWindSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BiometricPressure, other.BiometricPressure)) return false;
      if (SolarRadiation != other.SolarRadiation) return false;
      if (Heading != other.Heading) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryLife, other.BatteryLife)) return false;
      if (MeasurementTimestampLabel != other.MeasurementTimestampLabel) return false;
      if (MeasurementId != other.MeasurementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StationName.Length != 0) hash ^= StationName.GetHashCode();
      if (MeasurementTimestamp.Length != 0) hash ^= MeasurementTimestamp.GetHashCode();
      if (AirTemeparute != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirTemeparute);
      if (WetBulbTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WetBulbTemperature);
      if (Humidity != 0) hash ^= Humidity.GetHashCode();
      if (RainIntensity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RainIntensity);
      if (IntervalRain != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntervalRain);
      if (TotalRain != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalRain);
      if (PrecipitationType != 0) hash ^= PrecipitationType.GetHashCode();
      if (WindDirection != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindDirection);
      if (WindSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindSpeed);
      if (MaximumWindSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaximumWindSpeed);
      if (BiometricPressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BiometricPressure);
      if (SolarRadiation != 0) hash ^= SolarRadiation.GetHashCode();
      if (Heading != 0) hash ^= Heading.GetHashCode();
      if (BatteryLife != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryLife);
      if (MeasurementTimestampLabel.Length != 0) hash ^= MeasurementTimestampLabel.GetHashCode();
      if (MeasurementId.Length != 0) hash ^= MeasurementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeasurementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeasurementId);
      }
      if (StationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StationName);
      }
      if (MeasurementTimestamp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeasurementTimestamp);
      }
      if (AirTemeparute != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AirTemeparute);
      }
      if (WetBulbTemperature != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(WetBulbTemperature);
      }
      if (Humidity != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Humidity);
      }
      if (RainIntensity != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RainIntensity);
      }
      if (IntervalRain != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(IntervalRain);
      }
      if (TotalRain != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(TotalRain);
      }
      if (PrecipitationType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PrecipitationType);
      }
      if (WindDirection != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(WindDirection);
      }
      if (WindSpeed != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(WindSpeed);
      }
      if (MaximumWindSpeed != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(MaximumWindSpeed);
      }
      if (BiometricPressure != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(BiometricPressure);
      }
      if (SolarRadiation != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SolarRadiation);
      }
      if (Heading != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Heading);
      }
      if (BatteryLife != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(BatteryLife);
      }
      if (MeasurementTimestampLabel.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(MeasurementTimestampLabel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeasurementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeasurementId);
      }
      if (StationName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StationName);
      }
      if (MeasurementTimestamp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeasurementTimestamp);
      }
      if (AirTemeparute != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AirTemeparute);
      }
      if (WetBulbTemperature != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(WetBulbTemperature);
      }
      if (Humidity != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Humidity);
      }
      if (RainIntensity != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RainIntensity);
      }
      if (IntervalRain != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(IntervalRain);
      }
      if (TotalRain != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(TotalRain);
      }
      if (PrecipitationType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PrecipitationType);
      }
      if (WindDirection != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(WindDirection);
      }
      if (WindSpeed != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(WindSpeed);
      }
      if (MaximumWindSpeed != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(MaximumWindSpeed);
      }
      if (BiometricPressure != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(BiometricPressure);
      }
      if (SolarRadiation != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SolarRadiation);
      }
      if (Heading != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Heading);
      }
      if (BatteryLife != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(BatteryLife);
      }
      if (MeasurementTimestampLabel.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(MeasurementTimestampLabel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationName);
      }
      if (MeasurementTimestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasurementTimestamp);
      }
      if (AirTemeparute != 0F) {
        size += 1 + 4;
      }
      if (WetBulbTemperature != 0F) {
        size += 1 + 4;
      }
      if (Humidity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Humidity);
      }
      if (RainIntensity != 0F) {
        size += 1 + 4;
      }
      if (IntervalRain != 0F) {
        size += 1 + 4;
      }
      if (TotalRain != 0F) {
        size += 1 + 4;
      }
      if (PrecipitationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrecipitationType);
      }
      if (WindDirection != 0F) {
        size += 1 + 4;
      }
      if (WindSpeed != 0F) {
        size += 1 + 4;
      }
      if (MaximumWindSpeed != 0F) {
        size += 1 + 4;
      }
      if (BiometricPressure != 0F) {
        size += 1 + 4;
      }
      if (SolarRadiation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SolarRadiation);
      }
      if (Heading != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Heading);
      }
      if (BatteryLife != 0F) {
        size += 2 + 4;
      }
      if (MeasurementTimestampLabel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MeasurementTimestampLabel);
      }
      if (MeasurementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasurementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WeatherValues other) {
      if (other == null) {
        return;
      }
      if (other.StationName.Length != 0) {
        StationName = other.StationName;
      }
      if (other.MeasurementTimestamp.Length != 0) {
        MeasurementTimestamp = other.MeasurementTimestamp;
      }
      if (other.AirTemeparute != 0F) {
        AirTemeparute = other.AirTemeparute;
      }
      if (other.WetBulbTemperature != 0F) {
        WetBulbTemperature = other.WetBulbTemperature;
      }
      if (other.Humidity != 0) {
        Humidity = other.Humidity;
      }
      if (other.RainIntensity != 0F) {
        RainIntensity = other.RainIntensity;
      }
      if (other.IntervalRain != 0F) {
        IntervalRain = other.IntervalRain;
      }
      if (other.TotalRain != 0F) {
        TotalRain = other.TotalRain;
      }
      if (other.PrecipitationType != 0) {
        PrecipitationType = other.PrecipitationType;
      }
      if (other.WindDirection != 0F) {
        WindDirection = other.WindDirection;
      }
      if (other.WindSpeed != 0F) {
        WindSpeed = other.WindSpeed;
      }
      if (other.MaximumWindSpeed != 0F) {
        MaximumWindSpeed = other.MaximumWindSpeed;
      }
      if (other.BiometricPressure != 0F) {
        BiometricPressure = other.BiometricPressure;
      }
      if (other.SolarRadiation != 0) {
        SolarRadiation = other.SolarRadiation;
      }
      if (other.Heading != 0) {
        Heading = other.Heading;
      }
      if (other.BatteryLife != 0F) {
        BatteryLife = other.BatteryLife;
      }
      if (other.MeasurementTimestampLabel.Length != 0) {
        MeasurementTimestampLabel = other.MeasurementTimestampLabel;
      }
      if (other.MeasurementId.Length != 0) {
        MeasurementId = other.MeasurementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeasurementId = input.ReadString();
            break;
          }
          case 18: {
            StationName = input.ReadString();
            break;
          }
          case 26: {
            MeasurementTimestamp = input.ReadString();
            break;
          }
          case 37: {
            AirTemeparute = input.ReadFloat();
            break;
          }
          case 45: {
            WetBulbTemperature = input.ReadFloat();
            break;
          }
          case 48: {
            Humidity = input.ReadInt32();
            break;
          }
          case 61: {
            RainIntensity = input.ReadFloat();
            break;
          }
          case 69: {
            IntervalRain = input.ReadFloat();
            break;
          }
          case 77: {
            TotalRain = input.ReadFloat();
            break;
          }
          case 80: {
            PrecipitationType = input.ReadInt32();
            break;
          }
          case 93: {
            WindDirection = input.ReadFloat();
            break;
          }
          case 101: {
            WindSpeed = input.ReadFloat();
            break;
          }
          case 109: {
            MaximumWindSpeed = input.ReadFloat();
            break;
          }
          case 117: {
            BiometricPressure = input.ReadFloat();
            break;
          }
          case 120: {
            SolarRadiation = input.ReadInt32();
            break;
          }
          case 128: {
            Heading = input.ReadInt32();
            break;
          }
          case 141: {
            BatteryLife = input.ReadFloat();
            break;
          }
          case 146: {
            MeasurementTimestampLabel = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeasurementId = input.ReadString();
            break;
          }
          case 18: {
            StationName = input.ReadString();
            break;
          }
          case 26: {
            MeasurementTimestamp = input.ReadString();
            break;
          }
          case 37: {
            AirTemeparute = input.ReadFloat();
            break;
          }
          case 45: {
            WetBulbTemperature = input.ReadFloat();
            break;
          }
          case 48: {
            Humidity = input.ReadInt32();
            break;
          }
          case 61: {
            RainIntensity = input.ReadFloat();
            break;
          }
          case 69: {
            IntervalRain = input.ReadFloat();
            break;
          }
          case 77: {
            TotalRain = input.ReadFloat();
            break;
          }
          case 80: {
            PrecipitationType = input.ReadInt32();
            break;
          }
          case 93: {
            WindDirection = input.ReadFloat();
            break;
          }
          case 101: {
            WindSpeed = input.ReadFloat();
            break;
          }
          case 109: {
            MaximumWindSpeed = input.ReadFloat();
            break;
          }
          case 117: {
            BiometricPressure = input.ReadFloat();
            break;
          }
          case 120: {
            SolarRadiation = input.ReadInt32();
            break;
          }
          case 128: {
            Heading = input.ReadInt32();
            break;
          }
          case 141: {
            BatteryLife = input.ReadFloat();
            break;
          }
          case 146: {
            MeasurementTimestampLabel = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class WeatherId : pb::IMessage<WeatherId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WeatherId> _parser = new pb::MessageParser<WeatherId>(() => new WeatherId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WeatherId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WeatherGRPC.WeatherReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeatherId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeatherId(WeatherId other) : this() {
      measurementId_ = other.measurementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeatherId Clone() {
      return new WeatherId(this);
    }

    /// <summary>Field number for the "measurementId" field.</summary>
    public const int MeasurementIdFieldNumber = 1;
    private string measurementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MeasurementId {
      get { return measurementId_; }
      set {
        measurementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WeatherId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WeatherId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MeasurementId != other.MeasurementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MeasurementId.Length != 0) hash ^= MeasurementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MeasurementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeasurementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MeasurementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MeasurementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MeasurementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasurementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WeatherId other) {
      if (other == null) {
        return;
      }
      if (other.MeasurementId.Length != 0) {
        MeasurementId = other.MeasurementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MeasurementId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MeasurementId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
