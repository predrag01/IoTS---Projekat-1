// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeatherGRPC.Data;

#nullable disable

namespace WeatherGRPC.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    partial class WeatherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeatherGRPC.Data.WeatherValue", b =>
                {
                    b.Property<string>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<float>("AirTemperature")
                        .HasColumnType("real");

                    b.Property<float>("BatteryLife")
                        .HasColumnType("real");

                    b.Property<float>("BiometricPressure")
                        .HasColumnType("real");

                    b.Property<int>("Heading")
                        .HasColumnType("integer");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<float>("IntervalRain")
                        .HasColumnType("real");

                    b.Property<float>("MaximumWindSpeed")
                        .HasColumnType("real");

                    b.Property<string>("MeasurementTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MeasurementTimestampLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PrecipitationType")
                        .HasColumnType("integer");

                    b.Property<float>("RainIntensity")
                        .HasColumnType("real");

                    b.Property<int>("SolarRadiation")
                        .HasColumnType("integer");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("TotalRain")
                        .HasColumnType("real");

                    b.Property<float>("WetBulbTemeperature")
                        .HasColumnType("real");

                    b.Property<float>("WindDirection")
                        .HasColumnType("real");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.HasKey("MeasurementId");

                    b.ToTable("WeatherData");
                });
#pragma warning restore 612, 618
        }
    }
}
